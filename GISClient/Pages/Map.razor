@page "/map"
@using GISClient.Data.Model
@using GISClient.Data.Service;
@inject ApiService _apiService
@inject IJSRuntime JSRuntime
<h3>Map</h3>
<div id="map" style="width: 100%; height: 600px"></div>
<div class="input-group" style="width: 250px">
<input type="text" class="form-control" placeholder="Search object by name"
           @bind="SearchStringByName" @bind:event="oninput" @onkeyup="FilterGeoObjectsByName" />
    @if (SearchStringByName.Length > 0)
    {
        <div class="input-group-append">
            <button class="btn btn-danger" @onclick="ResetSearchByName">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
</div>
@code {
    private List<GeoObjectDTO> geoObjects;
    private List<GeoObjectDTO> geoObjectsFilter;
    private string SearchStringByName { get; set; } = string.Empty;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //For test without server
            TestData testData = new TestData();
            geoObjects = testData.GetGeoObjects();
            //geoObjects = await _apiService.GetGeoObjects();
            geoObjectsFilter = geoObjects;
            RenderMap(geoObjectsFilter);
        }
    }
    private async void RenderMap(List<GeoObjectDTO> geos)
    {
        await JSRuntime.InvokeVoidAsync("renderYandexMap", geos);
    }
    private void FilterGeoObjectsByName()
    {
        if (!string.IsNullOrEmpty(SearchStringByName))
        {
            geoObjectsFilter = geoObjectsFilter
                .Where(x => x.Name.IndexOf(SearchStringByName, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
            RenderMap(geoObjectsFilter);
        }
        else
        {
            geoObjectsFilter = geoObjects;
            RenderMap(geoObjectsFilter);
        }
    }
    public void ResetSearchByName()
    {
        SearchStringByName = String.Empty;
        geoObjectsFilter = geoObjects;
        RenderMap(geoObjectsFilter);
    }
}
